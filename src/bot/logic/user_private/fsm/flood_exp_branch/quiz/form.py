from typing import Any

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.scene import on
from aiogram.types import Message

from src.bot.common.files import files
from src.bot.filters.chat_types import ChatTypeFilter
from src.bot.kbds.reply import get_keyboard
from src.bot.kbds.text_builder import BUTTON_MENU
from src.bot.logic.user_private.fsm.flood_exp_branch.quiz.documents import DocumentsQuiz
from src.bot.logic.user_private.fsm.flood_exp_branch.quiz.scenes_common import QuestionWithType, CancellableScene, \
    flood_exp_answers, QUESTIONS_FORM


class FormQuiz(CancellableScene, state="form"):

    @on.message.enter()
    async def on_enter(self, message: Message, state: FSMContext, step: int | None = 0) -> Any:

        if not step:
            await message.answer(
                '–î–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —çƒ∏—Å–ø–µ—Ä—Ç–∏–∑—ã –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–µ –∏ –ø—Ä–∏ƒ∏—Ä–µ–ø–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æƒ∏—É–º–µ–Ω—Ç—ã.'
                '–ù–∏–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ —Ñ–æ—Ä–º–∞ —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —à–∞–±–ª–æ–Ω–æ–º, –∞ –¥–∞–ª–µ–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ'
                '–æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç–∞.')

            await message.answer_document(files['form_template'])
            # This is the first step, so we should greet the user
        try:
            QUESTIONS_FORM[step]
        except IndexError:
            # This error means that the question's list is over
            await self.on_succ_leave_from_form(message, state)
            return await self.wizard.goto(DocumentsQuiz)

        await state.update_data(step=step)
        return await message.answer(
            text=QUESTIONS_FORM[step].text,
            reply_markup=get_keyboard("üîô –ù–∞–∑–∞–¥",
                                      "‚ùå –í—ã—Ö–æ–¥"
                                      )
        )

    async def on_succ_leave_from_form(self, message: Message, state: FSMContext):

        data = await state.get_data()

        answers = data.get('answers', {})

        user_answers = []

        for step, question in enumerate(QUESTIONS_FORM):
            answer = answers.get(step)
            user_answers.append(f'{answer}')

        flood_exp_answers.form = user_answers

        await state.set_data({})


    @on.message.exit()
    async def on_exit(self, message: Message, state: FSMContext) -> None:

        await message.answer('–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?.',
                             reply_markup=BUTTON_MENU
                             )

        await state.set_data({})

    @on.message(F.text)
    async def answer(self, message: Message, state: FSMContext) -> None:

        data = await state.get_data()
        step = data["step"]
        answers = data.get("answers", {})

        print(message.content_type)

        if step == 1:
            await message.answer("–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∞–¥—Ä–µ—Å –∫–≤–∞—Ä—Ç–∏—Ä—ã.")

        answers[step] = message.text

        await state.update_data(answers=answers)
        await self.wizard.retake(step=step + 1)

    @on.message()
    async def unknown_message(self, message: Message) -> None:

        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.')
